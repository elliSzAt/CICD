name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  pull_request_target:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # ========================
  # CI PHASE - Security & Quality Checks
  # ========================
  security-scan:
    name: üîê Security Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not personal accounts.

      # - name: Notify Telegram on Security Failure
      #   if: failure()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: markdown
      #     message: |
      #       üö® *SECURITY ALERT* üö®
      #       *Repository:* `${{ github.repository }}`
      #       *Branch:* `${{ github.ref_name }}`
      #       *Commit:* `${{ github.sha }}`
      #       *Author:* ${{ github.actor }}
      #       ‚ùå **Gitleaks found potential secrets in your code!**
      #       Please review your commit and remove any hardcoded secrets.
      #       üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})


  # ========================
  # CI PHASE - Build & Test
  # ========================
  build-and-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application (if needed)
        run: echo "Build completed successfully"

      # - name: Notify Telegram on Build Failure
      #   if: failure()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: markdown
      #     message: |
      #       ‚ùå *BUILD FAILED* ‚ùå
      #       *Repository:* `${{ github.repository }}`
      #       *Branch:* `${{ github.ref_name }}`
      #       *Commit:* `${{ github.sha }}`
      #       *Author:* ${{ github.actor }}
      #       Build or tests failed during CI phase.
      #       üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})


  # ========================
  # CD PHASE - Docker Build & Push
  # ========================
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: self-hosted
    needs: [security-scan, build-and-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # Alternative: Use Personal Access Token if GITHUB_TOKEN fails
          # username: ${{ secrets.CR_USER }}
          # password: ${{ secrets.CR_PAT }}

      - name: Debug Registry Info
        run: |
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Actor: ${{ github.actor }}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Notify Telegram on Docker Build Failure
      #   if: failure()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: markdown
      #     message: |
      #       ‚ùå *DOCKER BUILD FAILED* ‚ùå
      #       *Repository:* `${{ github.repository }}`
      #       *Branch:* `${{ github.ref_name }}`
      #       *Commit:* `${{ github.sha }}`
      #       *Author:* ${{ github.actor }}
      #       Docker image build/push failed during CD phase.
      #       üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})


  # ========================
  # CD PHASE - Deploy (Simulation)
  # ========================
  deploy:
    name: üöÄ Deploy Application
    runs-on: self-hosted
    needs: docker-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to Server (Simulation)
        run: |
          echo "üöÄ Deploying application..."
          echo "Image: ${{ needs.docker-build.outputs.image-url }}"
          echo "Digest: ${{ needs.docker-build.outputs.image-digest }}"

          # Simulate deployment delay
          sleep 10

          echo "‚úÖ Deployment completed successfully!"
          echo "Application is now running at: https://your-domain.com"

      # - name: Notify Telegram on Deployment Failure
      #   if: failure()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: markdown
      #     message: |
      #       ‚ùå *DEPLOYMENT FAILED* ‚ùå
      #       *Repository:* `${{ github.repository }}`
      #       *Branch:* `${{ github.ref_name }}`
      #       *Commit:* `${{ github.sha }}`
      #       *Author:* ${{ github.actor }}
      #       Application deployment failed.
      #       üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})


  # ========================
  # NOTIFICATION - Success (COMMENTED OUT)
  # ========================
  # notify-success:
  #   name: üì¢ Success Notification
  #   runs-on: ubuntu-latest
  #   needs: [security-scan, build-and-test, docker-build, deploy]
  #   if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
  #
  #   steps:
  #     - name: Notify Telegram on Success
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_CHAT_ID }}
  #         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  #         format: markdown
  #         message: |
  #           ‚úÖ *PIPELINE SUCCESS* ‚úÖ
  #
  #           *Repository:* `${{ github.repository }}`
  #           *Branch:* `${{ github.ref_name }}`
  #           *Commit:* `${{ github.sha }}`
  #           *Author:* ${{ github.actor }}
  #
  #           üîê **Security Scan:** ‚úÖ Passed (Gitleaks)
  #           üß™ **Build & Test:** ‚úÖ Passed
  #           üê≥ **Docker Build:** ‚úÖ Completed
  #           üöÄ **Deployment:** ‚úÖ Successful
  #
  #           üåê **Application URL:** https://your-domain.com
  #           üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
  #
  #           üéâ *Your application is now live!*
